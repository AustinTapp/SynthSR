"""This scripts generates 3 examples in the case where no HR images are available. Therefore it still produces LR
synthetic T1 scans (input channel), but also HR synthetic T1 scans (regression targets, or output channel).
The synthetic regression targets and input scans are generated by sampling two different GMM conditionned on the same
label maps. They also undergo the same spatial transformation (such that they are aligned). However the synthetic
regression targets are not corrupted, nor downsampled in any way. """

import os
import time
import numpy as np
from ext.lab2im import utils
from SynthSR.brain_generator import BrainGenerator


# folder containing label maps to generate images from
labels_folder = '../../data/labels'
# no real images are used in this case
images_folder = None

# result parameters
n_examples = 3  # number of generated examples
result_dir = '../../data/generated_images/2-SR_synthetic'  # folder where they will be saved

# general parameters
channels = 2  # we will generate 2 channels: the input channel, and the regression target
# index corresponding to the regression target. Here we want to synthesise the synthetic regeression target after the
# input channel (which has here an implicit index 0).
output_channel = 1
target_res = None  # produce data at the resolution of the label maps
output_shape = None  # do not crop the generated pairs

# label values of structure to generate from
generation_labels = '../../data/labels_classes_priors/generation_labels.npy'
# classes associating similar structures to the same Gaussian distribution
generation_classes = '../../data/labels_classes_priors/generation_classes.npy'

# We now need to specify the hyperparameters both for the input channel and the regression target.
# This is done by concatenating the hyperparameters of each channels. The order of the hyperparameter must follow the
# index indicated by output_channel (i.e. input channel has index 0 and output_channel has index 1).
prior_means_t1_lr = np.load('../../data/labels_classes_priors/prior_means_t1_lr.npy')
prior_means_t1_hr = np.load('../../data/labels_classes_priors/prior_means_t1_hr.npy')
prior_means = np.concatenate([prior_means_t1_lr, prior_means_t1_hr], axis=0)
# same for the standard deviations
prior_stds_t1_lr = np.load('../../data/labels_classes_priors/prior_stds_t1_lr.npy')
prior_stds_t1_hr = np.load('../../data/labels_classes_priors/prior_stds_t1_hr.npy')
prior_stds = np.concatenate([prior_stds_t1_lr, prior_stds_t1_hr], axis=0)

# blurring/downsampling parameters
# We specify here the slice spacing/thickness that we want the input channel to mimic (we do not provide entries for
# regression target as it will not be downsampled).
data_res = np.array([1., 1., 3.])  # slice spacing i.e. resolution to mimic
thickness = np.array([1., 1., 3.])  # slice thickness
downsample = True  # downsample the input channel to simulated LR (recommanded as the gap is large between LR and HR).
build_reliability_maps = True  # add reliability map to input channels


########################################################################################################

# instantiate BrainGenerator object
brain_generator = BrainGenerator(labels_dir=labels_folder,
                                 images_dir=images_folder,
                                 generation_labels=generation_labels,
                                 n_channels=channels,
                                 output_channel=output_channel,
                                 target_res=target_res,
                                 output_shape=output_shape,
                                 generation_classes=generation_classes,
                                 prior_means=prior_means,
                                 prior_stds=prior_stds,
                                 data_res=data_res,
                                 thickness=thickness,
                                 downsample=downsample,
                                 build_reliability_maps=build_reliability_maps)

# create result dir
utils.mkdir(result_dir)

for n in range(n_examples):

    # generate !
    start = time.time()
    input_channels, regression_target = brain_generator.generate_brain()
    end = time.time()
    print('generation {0:d} took {1:.01f}s'.format(n+1, end - start))

    # save output image and label map
    utils.save_volume(np.squeeze(input_channels[..., 0]), brain_generator.aff, brain_generator.header,
                      os.path.join(result_dir, 't1_input_%s.nii.gz' % n))
    utils.save_volume(np.squeeze(input_channels[..., 1]), brain_generator.aff, brain_generator.header,
                      os.path.join(result_dir, 'reliability_map_input_%s.nii.gz' % n))
    utils.save_volume(np.squeeze(regression_target), brain_generator.aff, brain_generator.header,
                      os.path.join(result_dir, 't1_synthetic_target_%s.nii.gz' % n))
